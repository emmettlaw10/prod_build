{"ast":null,"code":"import { appendErrors as r } from \"react-hook-form\";\nimport { validateFieldsNatively as e, toNestError as o } from \"@hookform/resolvers\";\nvar n = function n(e, o) {\n    for (var n = {}; e.length;) {\n      var s = e[0],\n        t = s.code,\n        i = s.message,\n        a = s.path.join(\".\");\n      if (!n[a]) if (\"unionErrors\" in s) {\n        var u = s.unionErrors[0].errors[0];\n        n[a] = {\n          message: u.message,\n          type: u.code\n        };\n      } else n[a] = {\n        message: i,\n        type: t\n      };\n      if (\"unionErrors\" in s && s.unionErrors.forEach(function (r) {\n        return r.errors.forEach(function (r) {\n          return e.push(r);\n        });\n      }), o) {\n        var c = n[a].types,\n          f = c && c[s.code];\n        n[a] = r(a, o, n, t, f ? [].concat(f, s.message) : s.message);\n      }\n      e.shift();\n    }\n    return n;\n  },\n  s = function s(r, _s, t) {\n    return void 0 === t && (t = {}), function (i, a, u) {\n      try {\n        return Promise.resolve(function (o, n) {\n          try {\n            var a = Promise.resolve(r[\"sync\" === t.mode ? \"parse\" : \"parseAsync\"](i, _s)).then(function (r) {\n              return u.shouldUseNativeValidation && e({}, u), {\n                errors: {},\n                values: t.rawValues ? i : r\n              };\n            });\n          } catch (r) {\n            return n(r);\n          }\n          return a && a.then ? a.then(void 0, n) : a;\n        }(0, function (r) {\n          return {\n            values: {},\n            errors: r.isEmpty ? {} : o(n(r.errors, !u.shouldUseNativeValidation && \"all\" === u.criteriaMode), u)\n          };\n        }));\n      } catch (r) {\n        return Promise.reject(r);\n      }\n    };\n  };\nexport { s as zodResolver };","map":{"version":3,"mappings":";;AASA,IAAMA,IAAmB,WACvBC,GACAC;IAGA,KADA,IAAMC,IAAqC,IACpCF,EAAUG,SAAS;MACxB,IAAMC,IAAQJ,EAAU;QAChBK,IAAwBD,EAAxBC;QAAMC,IAAkBF,EAAlBE;QACRC,IAD0BH,EAATI,KACJC,KAAK;MAExB,KAAKP,EAAOK,IACV,IAAI,iBAAiBH,GAAO;QAC1B,IAAMM,IAAaN,EAAMO,YAAY,GAAGT,OAAO;QAE/CA,EAAOK,KAAS;UACdD,SAASI,EAAWJ;UACpBM,MAAMF,EAAWL;QAAAA;MAAAA,OAGnBH,EAAOK,KAAS;QAAED;QAASM,MAAMP;MAAAA;MAUrC,IANI,iBAAiBD,KACnBA,EAAMO,YAAYE,QAAQ,UAACH;QAAAA,OACzBA,EAAWR,OAAOW,QAAQ,UAACC;UAAAA,OAAMd,EAAUe,KAAKD;QAAAA;MAAAA,IAIhDb,GAA0B;QAC5B,IAAMe,IAAQd,EAAOK,GAAOS;UACtBC,IAAWD,KAASA,EAAMZ,EAAMC;QAEtCH,EAAOK,KAASW,EACdX,GACAN,GACAC,GACAG,GACAY,IACK,GAAgBE,OAAOF,GAAsBb,EAAME,WACpDF,EAAME;MAAAA;MAIdN,EAAUoB;IAAAA;IAGZ,OAAOlB;EAAAA;EAGImB,IACX,WAACC,GAAQC,IAAeC;IAAAA,4BAAkB,eACjCC,GAAQC,GAAGC;MAAAA;QAAAA;UAAAA;YAAAA,wBAEKL,EACQ,WAAzBE,EAAgBI,OAAkB,UAAU,cAC5CH,GAAQF,oBAFJM;cAMN,OAFAF,EAAQG,6BAA6BC,EAAuB,IAAIJ,IAEzD;gBACLzB,QAAQ;gBACRuB,QAAQD,EAAgBQ,YAAYP,IAASI;cAAAA;YAAAA;UAAAA;YAAAA;UAAAA;UAAAA;QAAAA,eAExCzB;UACP,OAAO;YACLqB,QAAQ;YACRvB,QAAQE,EAAM6B,UACV,KACAC,EACAnC,EACEK,EAAMF,SACLyB,EAAQG,6BACgB,UAAzBH,EAAQQ,eAEVR;UAAAA;QAAAA;MAAAA,CAxBZ;QAAA;MAAA;IAAA;EAAA;AAAA","names":["parseErrorSchema","zodErrors","validateAllFieldCriteria","errors","length","error","code","message","_path","path","join","unionError","unionErrors","type","forEach","e","push","types","messages","appendErrors","concat","shift","zodResolver","schema","schemaOptions","resolverOptions","values","_","options","mode","data","shouldUseNativeValidation","validateFieldsNatively","rawValues","isEmpty","toNestError","criteriaMode"],"sources":["C:\\Users\\Emmett\\Documents\\gb_final\\Gaiderbytes\\node_modules\\@hookform\\resolvers\\zod\\src\\zod.ts"],"sourcesContent":["import {\n  appendErrors,\n  FieldError,\n  FieldErrors,\n} from 'react-hook-form';\nimport { z } from 'zod';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport type { Resolver } from './types';\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length;) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n    async (values, _, options) => {\n      try {\n        const data = await schema[\n          resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n        ](values, schemaOptions);\n\n        options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n        return {\n          errors: {} as FieldErrors,\n          values: resolverOptions.rawValues ? values : data,\n        };\n      } catch (error: any) {\n        return {\n          values: {},\n          errors: error.isEmpty\n            ? {}\n            : toNestError(\n              parseErrorSchema(\n                error.errors,\n                !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n              ),\n              options,\n            ),\n        };\n      }\n    };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}